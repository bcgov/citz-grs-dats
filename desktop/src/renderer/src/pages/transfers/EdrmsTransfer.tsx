import { Grid2 as Grid, Stack, Typography } from "@mui/material";
import { Stepper, Toast } from "@renderer/components";
import { EdrmsUploadFolderView } from "@renderer/components/transfer/edrms-views";
import { EdrmsUploadDataportView } from "@renderer/components/transfer/edrms-views/EdrmsUploadDataportView";
import { useEffect, useState } from "react";
import { toast } from "react-toastify";

export const EdrmsTransferPage = () => {
  const [api] = useState(window.api); // Preload scripts

  const [currentViewIndex, setCurrentViewIndex] = useState(0);
  const [folderPath, setFolderPath] = useState<string | null | undefined>(null);
  const [fileList, setFileList] = useState<File | null | undefined>(undefined);
  const [dataportFile, setDataportFile] = useState<File | null | undefined>(
    undefined
  );
  const [dataportFoundInEdrms, setDataportFoundInEdrms] =
    useState<boolean>(false);
  const [transferForm, setTransferForm] = useState<File | null | undefined>(
    undefined
  );
  const [dataportJson, setDataportJson] = useState<
    Record<string, string>[] | null
  >(null);
  const [metadata, setMetadata] = useState<Record<string, unknown>>({});

  // Pulled from dataport file
  const [accession, setAccession] = useState<string | undefined | null>(null);
  const [application, setApplication] = useState<string | undefined | null>(
    null
  );

  // User confirms if accession & application are correct
  const [confirmAccAppChecked, setConfirmAccAppChecked] =
    useState<boolean>(false);

  const onNextPress = () => {
    setCurrentViewIndex((prev) => prev + 1);
  };

  const onBackPress = () => {
    setCurrentViewIndex((prev) => prev - 1);
  };

  const parseEdrmsFiles = async (folderPath: string) => {
    const {
      dataport: parsedDataport,
      fileList: parsedFileList,
      transferForm: parsedTransferForm,
    } = await api.transfer.parseEdrmsFiles(folderPath);
    if (parsedDataport && !dataportFile) {
      setDataportFile(parsedDataport);
      setDataportFoundInEdrms(true);
    }
    if (parsedFileList && !fileList) setFileList(parsedFileList);
    if (parsedTransferForm && !transferForm)
      setTransferForm(parsedTransferForm);
  };

  const parseDataport = async (dataportFile: File) => {
    // Parse file to json
    try {
      const dataportJson = await api.transfer.parseTabDelimitedTxt(
        dataportFile
      );
      setDataportJson(dataportJson);

      if (!folderPath)
        throw new Error("Missing folder path while parsing dataport file.");

      // Parse json into admin, folders, and files metadata
      const metadata = await api.transfer.parseDataportJsonMetadata(
        dataportJson,
        folderPath
      );
      setMetadata(metadata);
      setAccession(metadata.admin.accession);
      setApplication(metadata.admin.application);
    } catch (error) {
      console.error(error);
      toast.error(Toast, {
        data: {
          title: "Dataport parse failed",
          message:
            "Your dataport file could not be parsed. Please be sure to only upload dataport files generated by the EDRMS system.",
        },
      });
      setDataportFile(null);
    }
  };

  useEffect(() => {
    if (folderPath) {
      // Check for edrms files when a new folder is chosen
      parseEdrmsFiles(folderPath);
    }
  }, [folderPath]);

  useEffect(() => {
    if (dataportFile) {
      parseDataport(dataportFile);
    } else {
      // Reset
      setDataportFoundInEdrms(false);
      setMetadata({});
      setDataportJson(null);
      setAccession(null);
      setApplication(null);
    }
  }, [dataportFile]);

  useEffect(() => {
    if (currentViewIndex === 1) {
      // Open of upload dataport view
      if (dataportFoundInEdrms) {
        toast.success(Toast, {
          data: {
            title: "Dataport file detected",
            message:
              "We have automatically populated your dataport file by scanning the EDRMS folder you uploaded in the previous step.",
          },
        });
      }
    }
  }, [currentViewIndex]);

  return (
    <Grid container sx={{ paddingBottom: "20px" }}>
      <Grid size={2} />
      <Grid size={8} sx={{ paddingTop: 3 }}>
        <Stack gap={2}>
          <Typography variant="h2">Send records from EDRMS</Typography>
          <Stepper
            items={[
              "EDRMS folder",
              "Dataport file",
              "File list",
              "Transfer form",
              "Submission agreement",
              "Confirmation",
              "Finish",
            ]}
            currentIndex={currentViewIndex}
          />
          {currentViewIndex === 0 && (
            <EdrmsUploadFolderView
              folderPath={folderPath}
              setFolderPath={setFolderPath}
              onNextPress={onNextPress}
            />
          )}
          {currentViewIndex === 1 && (
            <EdrmsUploadDataportView
              file={dataportFile}
              setFile={setDataportFile}
              accession={accession}
              application={application}
              confirmChecked={confirmAccAppChecked}
              setConfirmChecked={setConfirmAccAppChecked}
              onNextPress={onNextPress}
              onBackPress={onBackPress}
            />
          )}
        </Stack>
      </Grid>
      <Grid size={2} />
    </Grid>
  );
};
